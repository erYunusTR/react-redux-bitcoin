{"version":3,"sources":["components/App/App.styles.js","constants/index.js","components/OrderBook/OrderBook.styles.js","store/states/orderBook.js","components/OrderBook/OrderBook.js","components/OrderBook/index.js","store/states/liveOrders.js","components/LiveOrders/LiveOrders.js","components/LiveOrders/LiveOrders.styles.js","components/LiveOrders/index.js","store/states/liveTrades.js","components/LiveTrades/LiveTrades.js","components/LiveTrades/LiveTrades.styles.js","components/LiveTrades/index.js","components/AdvancedChart/AdvancedChart.js","components/AdvancedChart/AdvancedChart.styles.js","components/AdvancedChart/index.js","components/App/App.js","serviceWorker.js","store/reducers.js","index.js","store/createStore.js"],"names":["gridItemColor","API_URL","CURRENCY_PAIR","theme","root","margin","table","borderCollapse","width","fontSize","color","paddingTop","tableHeader","tableTitle","paddingBottom","sellPriceColumn","buyPriceColumn","priceTh","textAlign","amountTh","totalTh","priceColumn","amountColumn","totalColumn","ORDER_BOOK_CHANGE","initialState","orderBookReducer","state","action","type","payload","useStyles","makeStyles","styles","TableHeader","classes","className","colSpan","OrderBook","ASKS","dispatch","useDispatch","orderBookStore","useSelector","orderBook","useEffect","subscribe","event","data","channel","ws","WebSocket","onopen","send","JSON","stringify","onmessage","response","parse","orderBookChange","onclose","close","array","bids","asks","limitArray","length","slice","orderRows","map","item","index","price","parseFloat","amount","total","clsx","toFixed","sort","a","b","reverse","sortArrayBigToSmall","LIVE_ORDERS_ADD","liveOrdersReducer","LIVE_ORDERS_TABLE_LIMIT","useStylesOrderBook","stylesOrderBook","classesOrderBook","LiveOrders","liveOrdersStore","liveOrders","liveOrdersAdd","dateTime","datetime","orderType","parseInt","order_type","moment","unix","format","LIVE_TRADES_ADD","liveTradesReducer","typeTh","typeColumn","timeColumn","LiveTrades","liveTradesStore","liveTrades","liveTradesAdd","timestamp","height","AdvancedChart","autosize","symbol","toUpperCase","interval","style","locale","toolbar_bg","app","gridContainer","display","minWidth","backgroundColor","gap","gridTemplateAreas","gridTemplateColumns","gridTemplateRows","gridArea","overflow","overflowX","advancedChart","left","right","App","Boolean","window","location","hostname","match","makeRootReducer","asyncReducers","combineReducers","store","enhancers","devToolsExtension","__REDUX_DEVTOOLS_EXTENSION__","push","middleware","thunk","createStore","compose","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.091ac4e8.chunk.js","sourcesContent":["const gridContainerColor = \"#252930\"\nconst gridItemColor = \"#161a1e\"\n\nexport default theme => ({\n    app: {\n        width: \"100%\",\n        height: \"100%\"\n    },\n    gridContainer: {\n        display: \"grid\",\n        width: \"100%\",\n        height: \"100%\",\n        minWidth: 0,\n        backgroundColor: gridContainerColor,\n        gap: \"1px\",\n        gridTemplateAreas: `\n                             \"left orderBook advancedChart liveOrders right\"                        \n                             \"left orderBook liveTrades liveOrders right\"\n                           `,\n        gridTemplateColumns: \"1fr minmax(253px, 320px) minmax(510px, 880px) minmax(253px, 320px) 1fr\",\n        gridTemplateRows: \"minmax(auto, 70vh) minmax(auto, 30vh)\",\n    },\n    orderBook: {\n        gridArea: \"orderBook\",\n        backgroundColor: gridItemColor,\n        overflow: \"auto\",\n        overflowX: \"hidden\"\n    },\n    liveOrders: {\n        gridArea: \"liveOrders\",\n        backgroundColor: gridItemColor,\n        overflow: \"auto\",\n        overflowX: \"hidden\"\n    },\n    liveTrades: {\n        gridArea: \"liveTrades\",\n        backgroundColor: gridItemColor,\n        overflow: \"auto\",\n        overflowX: \"hidden\"\n    },\n    advancedChart: {\n        gridArea: \"advancedChart\",\n        backgroundColor: gridItemColor\n    },\n    left: {\n        gridArea: \"left\",\n        backgroundColor: gridItemColor\n    },\n    right: {\n        gridArea: \"right\",\n        backgroundColor: gridItemColor\n    }\n})","export const API_URL = 'wss://ws.bitstamp.net'\r\nexport const CURRENCY_PAIR = 'btcusd'\r\n\r\nexport const PRICE_DIGITS = 2\r\nexport const AMOUNT_DIGITS = 8\r\nexport const TOTAL_DIGITS = 2\r\n\r\n// ORDER BOOK\r\nexport const ORDER_BOOK_TABLE_LIMIT = 15\r\n\r\n//LIVE ORDERS\r\nexport const LIVE_ORDERS_TABLE_LIMIT = 30","export default theme => ({\n    root: {\n        margin: 10\n    },\n    table: {\n        borderCollapse: \"collapse\",\n        width: \"100%\",\n        fontSize: 12,\n        color: \"#b7bdc6\",\n        margin: \"auto\",\n        paddingTop: 10\n    },\n    tableHeader: {\n        color: \"#848e9c\"\n    },\n    tableTitle: {\n        fontSize: 18,\n        paddingBottom: 5\n    },\n    sellPriceColumn: {\n        color: \"#f6465d\"\n    },\n    buyPriceColumn: {\n        color: \"#0ecb81\"\n    },\n    priceTh: {\n        textAlign: \"left\"\n    },\n    amountTh: {\n        textAlign: \"right\"\n    },\n    totalTh: {\n        textAlign: \"right\"\n    },\n    priceColumn: {\n        textAlign: \"left\"\n    },\n    amountColumn: {\n        textAlign: \"right\"\n    },\n    totalColumn: {\n        textAlign: \"right\"\n    }\n})\n","// ------------------------------------\r\n// Constants\r\n// ------------------------------------\r\nexport const ORDER_BOOK_CHANGE = 'ORDER_BOOK_CHANGE'\r\n\r\n// ------------------------------------\r\n// Reducer\r\n// ------------------------------------\r\nconst initialState = {}\r\nexport default function orderBookReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case ORDER_BOOK_CHANGE:\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// ------------------------------------\r\n// Actions\r\n// ------------------------------------\r\nexport function orderBookChange(orderBook = {}) {\r\n    return {\r\n        type: ORDER_BOOK_CHANGE,\r\n        payload: orderBook\r\n    }\r\n}\r\n","import React, {useEffect} from 'react'\nimport {makeStyles} from '@material-ui/core/styles'\nimport {\n    AMOUNT_DIGITS,\n    API_URL,\n    CURRENCY_PAIR,\n    ORDER_BOOK_TABLE_LIMIT,\n    PRICE_DIGITS,\n    TOTAL_DIGITS\n} from \"../../constants\"\nimport clsx from \"clsx\"\nimport styles from './OrderBook.styles'\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {orderBookChange} from \"../../store/states/orderBook\"\n\nconst useStyles = makeStyles(styles)\n\nfunction TableHeader() {\n    const classes = useStyles()\n\n    return (\n        <thead className={classes.tableHeader}>\n        <tr>\n            <th className={classes.tableTitle} colSpan=\"3\">{\"ORDER BOOK\"}</th>\n        </tr>\n        <tr>\n            <th className={classes.priceTh}>Price(USD)</th>\n            <th className={classes.amountTh}>Amount(BTC)</th>\n            <th className={classes.totalTh}>Total</th>\n        </tr>\n        </thead>\n    )\n}\n\nfunction OrderBook() {\n    const classes = useStyles()\n    const ASKS = \"ASKS\"\n    const BIDS = \"BIDS\"\n\n    const dispatch = useDispatch()\n    const orderBookStore = useSelector(state => state.orderBook)\n\n    useEffect(() => {\n        const subscribe = {\n            event: 'bts:subscribe',\n            data: {\n                channel: `order_book_${CURRENCY_PAIR}`\n            }\n        }\n        const ws = new WebSocket(API_URL)\n\n        ws.onopen = () => {\n            ws.send(JSON.stringify(subscribe))\n        }\n        ws.onmessage = (event) => {\n            const response = JSON.parse(event.data)\n            //add response data to redux store\n            dispatch(orderBookChange(response.data))\n        }\n        ws.onclose = () => {\n            ws.close()\n        }\n\n        return () => {\n            ws.close()\n        }\n    }, [])\n\n    const {bids, asks} = orderBookStore\n\n    const sortArrayBigToSmall = (array) => {\n        return array && array.sort((a, b) => (a[0] + b[0]))\n    }\n\n    const sortArraySmallToBig = (array) => {\n        return array && array.sort((a, b) => (a[0] - b[0]))\n    }\n\n    const limitArray = (array) => {\n        if (array.length > ORDER_BOOK_TABLE_LIMIT) {\n            let newArray = []\n            newArray = array.slice(0, ORDER_BOOK_TABLE_LIMIT)\n            return newArray\n        } else {\n            return array\n        }\n    }\n\n    const orderRows = (array, type) => (\n        array &&\n        array.map((item, index) => {\n            const price = parseFloat(item[0])\n            const amount = parseFloat(item[1])\n            const total = item[0] * item[1]\n            return (\n                <tr key={index}>\n                    <td className={clsx(classes.priceColumn, type === ASKS ? classes.sellPriceColumn : classes.buyPriceColumn)}> {price.toFixed(PRICE_DIGITS)} </td>\n                    <td className={classes.amountColumn}> {amount.toFixed(AMOUNT_DIGITS)} </td>\n                    <td className={classes.totalColumn}> {total.toFixed(TOTAL_DIGITS)} </td>\n                </tr>\n            )\n        })\n    )\n\n    return (\n        <div className={classes.root}>\n            <table className={classes.table}>\n                <TableHeader/>\n                {/*Order book asks*/}\n                <tbody>{asks && orderRows(limitArray(sortArraySmallToBig(asks)).reverse(), ASKS)}</tbody>\n                {/*Order book bids*/}\n                <tbody>{bids && orderRows(limitArray(sortArrayBigToSmall(bids)), BIDS)}</tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default OrderBook\n","import OrderBook from './OrderBook'\n\nexport default OrderBook\n","import {LIVE_ORDERS_TABLE_LIMIT} from \"../../constants\";\r\n\r\n// ------------------------------------\r\n// Constants\r\n// ------------------------------------\r\nexport const LIVE_ORDERS_ADD = 'LIVE_ORDERS_ADD'\r\n\r\n// ------------------------------------\r\n// Reducer\r\n// ------------------------------------\r\nconst initialState = []\r\nexport default function liveOrdersReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case LIVE_ORDERS_ADD:\r\n            return [action.payload, ...state.slice(0, LIVE_ORDERS_TABLE_LIMIT - 1)]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// ------------------------------------\r\n// Actions\r\n// ------------------------------------\r\nexport function liveOrdersAdd(liveOrders = {}) {\r\n    return {\r\n        type: LIVE_ORDERS_ADD,\r\n        payload: liveOrders\r\n    }\r\n}\r\n","import React, {useEffect} from 'react'\nimport {makeStyles} from '@material-ui/core/styles'\nimport {AMOUNT_DIGITS, API_URL, CURRENCY_PAIR, PRICE_DIGITS} from \"../../constants\"\nimport clsx from \"clsx\"\nimport moment from \"moment\"\nimport styles from './LiveOrders.styles'\nimport stylesOrderBook from '../OrderBook/OrderBook.styles'\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {liveOrdersAdd} from \"../../store/states/liveOrders\"\n\nconst useStyles = makeStyles(styles)\nconst useStylesOrderBook = makeStyles(stylesOrderBook)\n\nfunction TableHeader() {\n    const classes = useStyles()\n    const classesOrderBook = useStylesOrderBook()\n\n    return (\n        <thead className={classesOrderBook.tableHeader}>\n        <tr>\n            <th className={classesOrderBook.tableTitle} colSpan=\"3\">{\"LIVE ORDERS\"}</th>\n        </tr>\n        <tr>\n            <th className={classesOrderBook.priceTh}>Price(USD)</th>\n            <th className={classesOrderBook.amountTh}>Amount(BTC)</th>\n            <th className={classesOrderBook.totalTh}>Time</th>\n        </tr>\n        </thead>\n    )\n}\n\nfunction LiveOrders() {\n    const classes = useStyles()\n    const classesOrderBook = useStylesOrderBook()\n\n    const dispatch = useDispatch()\n    const liveOrdersStore = useSelector(state => state.liveOrders)\n\n    useEffect(() => {\n        const subscribe = {\n            event: 'bts:subscribe',\n            data: {\n                channel: `live_orders_${CURRENCY_PAIR}`\n            }\n        }\n\n        const ws = new WebSocket(API_URL)\n\n        ws.onopen = () => {\n            ws.send(JSON.stringify(subscribe))\n        }\n        ws.onmessage = (event) => {\n            const response = JSON.parse(event.data)\n            //add response data to redux store\n            dispatch(liveOrdersAdd(response.data))\n        }\n        ws.onclose = () => {\n            ws.close()\n        }\n\n        return () => {\n        }\n    }, [])\n\n    const orderRows = (array) => (\n        array &&\n        array.map((item, index) => {\n            const price = parseFloat(item.price)\n            const amount = parseFloat(item.amount)\n            const dateTime = item.datetime\n            const orderType = parseInt(item.order_type)\n\n            if (price && amount) {\n                return (\n                    <tr key={index}>\n                        <td className={clsx(classesOrderBook.priceColumn, orderType == 0 ? classesOrderBook.buyPriceColumn : classesOrderBook.sellPriceColumn)}> {price.toFixed(PRICE_DIGITS)} </td>\n                        <td className={classesOrderBook.amountColumn}> {amount.toFixed(AMOUNT_DIGITS)} </td>\n                        <td className={classesOrderBook.totalColumn}>{moment.unix(dateTime).format(\"HH:mm:ss\")}</td>\n                    </tr>\n                )\n            }\n        })\n    )\n\n    return (\n        <div className={classesOrderBook.root}>\n            <table className={classesOrderBook.table}>\n                <TableHeader/>\n                <tbody>{liveOrdersStore && orderRows(liveOrdersStore)}</tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default LiveOrders\n","export default theme => ({\n    root: {\n        //styles here\n    }\n})\n","import LiveOrders from './LiveOrders'\n\nexport default LiveOrders\n","// ------------------------------------\r\n// Constants\r\n// ------------------------------------\r\nexport const LIVE_TRADES_ADD = 'LIVE_TRADES_ADD'\r\n\r\n// ------------------------------------\r\n// Reducer\r\n// ------------------------------------\r\nconst initialState = []\r\nexport default function liveTradesReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case LIVE_TRADES_ADD:\r\n            return [action.payload, ...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// ------------------------------------\r\n// Actions\r\n// ------------------------------------\r\nexport function liveTradesAdd(liveTrades = {}) {\r\n    return {\r\n        type: LIVE_TRADES_ADD,\r\n        payload: liveTrades\r\n    }\r\n}\r\n","import React, {useEffect} from 'react'\nimport {makeStyles} from '@material-ui/core/styles'\nimport {AMOUNT_DIGITS, API_URL, CURRENCY_PAIR, PRICE_DIGITS} from \"../../constants\"\nimport clsx from \"clsx\"\nimport moment from \"moment\"\nimport styles from './LiveTrades.styles'\nimport stylesOrderBook from '../OrderBook/OrderBook.styles'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {liveTradesAdd} from \"../../store/states/liveTrades\";\n\nconst useStyles = makeStyles(styles)\nconst useStylesOrderBook = makeStyles(stylesOrderBook)\n\nfunction TableHeader() {\n    const classes = useStyles()\n    const classesOrderBook = useStylesOrderBook()\n\n    return (\n        <thead className={classesOrderBook.tableHeader}>\n        <tr>\n            <th className={classesOrderBook.tableTitle} colSpan=\"4\">{\"LIVE TRADES\"}</th>\n        </tr>\n        <tr>\n            <th className={classes.typeTh}>Type</th>\n            <th className={classes.priceTh}>Price(USD)</th>\n            <th className={classes.amountTh}>Amount(BTC)</th>\n            <th className={classes.totalTh}>Time</th>\n        </tr>\n        </thead>\n    )\n}\n\nfunction LiveTrades() {\n    const classes = useStyles()\n    const classesOrderBook = useStylesOrderBook()\n\n    const dispatch = useDispatch()\n    const liveTradesStore = useSelector(state => state.liveTrades)\n\n    useEffect(() => {\n        const subscribe = {\n            event: 'bts:subscribe',\n            data: {\n                channel: `live_trades_${CURRENCY_PAIR}`\n            }\n        }\n\n        const ws = new WebSocket(API_URL)\n\n        ws.onopen = () => {\n            ws.send(JSON.stringify(subscribe))\n        }\n        ws.onmessage = (event) => {\n            const response = JSON.parse(event.data)\n            //add response data to redux store\n            dispatch(liveTradesAdd(response.data))\n        }\n        ws.onclose = () => {\n            ws.close()\n        }\n\n        return () => {\n        }\n    }, [])\n\n    const orderRows = (array) => (\n        array &&\n        array.map((item, index) => {\n            const price = parseFloat(item.price)\n            const amount = parseFloat(item.amount)\n            const dateTime = item.timestamp\n            const type = parseInt(item.type)\n\n            if (price && amount) {\n                return (\n                    <tr key={index}>\n                        <td className={clsx(classes.typeColumn, type == 0 ? classesOrderBook.buyPriceColumn : classesOrderBook.sellPriceColumn)}> {type == 0 ? \"BUY\" : \"SELL\"} </td>\n                        <td className={classes.priceColumn}> {price.toFixed(PRICE_DIGITS)} </td>\n                        <td className={classes.amountColumn}> {amount.toFixed(AMOUNT_DIGITS)} </td>\n                        <td className={classes.timeColumn}>{moment.unix(dateTime).format(\"HH:mm:ss\")}</td>\n                    </tr>\n                )\n            }\n        })\n    )\n\n    return (\n        <div className={classesOrderBook.root}>\n            <table className={classesOrderBook.table}>\n                <TableHeader/>\n                <tbody>{liveTradesStore && orderRows(liveTradesStore)}</tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default LiveTrades\n","export default theme => ({\n    root: {\n        //styles here\n    },\n    typeTh: {\n        textAlign: \"left\"\n    },\n    priceTh: {\n        textAlign: \"right\"\n    },\n    amountTh: {\n        textAlign: \"right\"\n    },\n    totalTh: {\n        textAlign: \"right\"\n    },\n    typeColumn: {\n        textAlign: \"left\"\n    },\n    priceColumn: {\n        textAlign: \"right\"\n    },\n    amountColumn: {\n        textAlign: \"right\"\n    },\n    timeColumn: {\n        textAlign: \"right\"\n    }\n})\n","import LiveTrades from './LiveTrades'\n\nexport default LiveTrades\n","import React from 'react'\nimport {makeStyles} from '@material-ui/core/styles'\nimport styles from './AdvancedChart.styles'\nimport TradingViewWidget from 'react-tradingview-widget'\nimport {CURRENCY_PAIR} from \"../../constants\"\n\nconst useStyles = makeStyles(styles)\n\nfunction AdvancedChart() {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.root}>\n            <TradingViewWidget\n                autosize\n                symbol={CURRENCY_PAIR.toUpperCase()}\n                interval=\"15\"\n                theme=\"Dark\"\n                style=\"1\"\n                locale=\"tr\"\n                toolbar_bg=\"#161a1e\"\n            />\n        </div>\n\n    )\n}\n\nexport default AdvancedChart\n","export default theme => ({\n    root: {\n        height: \"100%\",\n        width: \"100%\"\n    }\n})\n","import AdvancedChart from './AdvancedChart'\n\nexport default AdvancedChart\n","import React from 'react'\nimport {makeStyles} from \"@material-ui/core/styles\"\nimport styles from './App.styles'\nimport OrderBook from \"../OrderBook\"\nimport LiveOrders from \"../LiveOrders\"\nimport LiveTrades from \"../LiveTrades\"\nimport AdvancedChart from \"../AdvancedChart\"\n\nconst useStyles = makeStyles(styles)\n\nfunction App() {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.app}>\n            <div className={classes.gridContainer}>\n                <div className={classes.orderBook}>\n                    <OrderBook/>\n                </div>\n                <div className={classes.liveOrders}>\n                    <LiveOrders/>\n                </div>\n                <div className={classes.liveTrades}>\n                    <LiveTrades/>\n                </div>\n                <div className={classes.advancedChart}>\n                    <AdvancedChart/>\n                </div>\n                <div className={classes.left}/>\n                <div className={classes.right}/>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import {combineReducers} from 'redux'\r\n\r\nimport orderBookReducer from './states/orderBook'\r\nimport liveOrdersReducer from './states/liveOrders'\r\nimport liveTradesReducer from './states/liveTrades'\r\n\r\nexport function makeRootReducer(asyncReducers) {\r\n    return combineReducers({\r\n        // Add sync reducers here\r\n        orderBook: orderBookReducer,\r\n        liveOrders: liveOrdersReducer,\r\n        liveTrades: liveTradesReducer,\r\n        ...asyncReducers\r\n    })\r\n}\r\n\r\nexport function injectReducer(store, {key, reducer}) {\r\n    store.asyncReducers[key] = reducer // eslint-disable-line no-param-reassign\r\n    store.replaceReducer(makeRootReducer(store.asyncReducers))\r\n}\r\n\r\nexport default makeRootReducer\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport createStore from './store/createStore'\n\nconst store = createStore()\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport makeRootReducer from './reducers'\r\nimport thunk from 'redux-thunk'\r\n\r\nexport default function createReduxStore(initialState = {}) {\r\n    // ======================================================\r\n    // Store Enhancers\r\n    // ======================================================\r\n    const enhancers = []\r\n\r\n    if (window && window.location && window.location.hostname === 'localhost') {\r\n        const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__\r\n        if (typeof devToolsExtension === 'function') {\r\n            enhancers.push(devToolsExtension())\r\n        }\r\n    }\r\n\r\n    // ======================================================\r\n    // Middleware Configuration\r\n    // ======================================================\r\n    const middleware = [\r\n        // This is where you add other middleware like redux-observable\r\n        thunk\r\n    ]\r\n\r\n    // ======================================================\r\n    // Store Instantiation and HMR Setup\r\n    // ======================================================\r\n    const store = createStore(\r\n        makeRootReducer(),\r\n        initialState,\r\n        compose(applyMiddleware(...middleware), ...enhancers)\r\n    )\r\n\r\n    store.asyncReducers = {}\r\n\r\n    if (module.hot) {\r\n        module.hot.accept('./reducers', () => {\r\n            const reducers = require('./reducers').default // eslint-disable-line global-require\r\n            store.replaceReducer(reducers(store.asyncReducers))\r\n        })\r\n    }\r\n\r\n    return store\r\n}\r\n"],"sourceRoot":""}